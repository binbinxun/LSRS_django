
为reservation表添加索引
 indexes = [
            models.Index(fields=['seat', 'start_time', 'end_time']),
            models.Index(fields=['status', 'end_time'])
        ]

 使用 Locust 模拟并发请求
    locust -f test_reservation.py

添加定时任务cron

本项目利用了django的如下模块
视图view
模型model
模板template
表单form
路由url
管理后台admin

模型model
模型是django中用于描述数据库表结构的类，每个模型类对应数据库中的一张表，每个模型类的实例对应数据库中的一行数据。在models.py文件中定义模型类，每个模型类继承自django.db.models.Model类，并定义了表名、字段名、字段类型等属性。

视图view
视图是处理用户请求并返回响应的函数或类，在views.py文件中定义。视图函数或类可以处理GET、POST等请求，并返回HTML页面、JSON数据等响应。

模板template
模板是用于生成HTML页面的文件，在templates文件夹中定义。模板中可以使用模板语言来动态生成内容，如变量、标签、过滤器等。

表单form
表单是用于收集用户输入数据的HTML表单，在forms.py文件中定义。表单类继承自django.forms.Form类，并定义了表单字段、验证规则等属性。其实项目中并没有使用到django表单，而是直接在视图函数中处理了请求参数。项目主要使用HTML表单，并在视图处理请求。

路由url
路由是URL与视图函数或类之间的映射关系，在urls.py文件中定义。路由可以定义URL模式、视图函数或类、命名空间等属性。

管理后台admin
管理后台是用于管理网站内容的后台界面，在admin.py文件中定义。管理后台可以添加、修改、删除数据，并查看数据统计等。

数据库表结构
本项目使用了MySQL数据库，在models.py文件中定义了reservations模型类，包含了user、seat、start_time、end_time、status等字段。
user字段表示用户ID，seat字段表示座位号，start_time字段表示开始时间，end_time字段表示结束时间，status字段表示状态（已预约、已取消、已完成、已签到）。
还定义了一些索引，用于加速查询。
本项目主要实现了预约座位的功能，包括用户预约、取消预约、签到等功能。用户可以通过网页预约座位，管理员可以在后台管理预约信息。项目使用了Django框架，并使用了MySQL数据库。项目主要使用了Django的视图、模型、模板、表单、路由、管理后台等模块。

除了reservations模型类，还定义了Users模型类，用于存储用户信息。Users模型类继承自django.contrib.auth.models.AbstractUser类，并添加了phone字段，用于存储用户手机号。
以及Seats模型类，用于存储座位信息。Seats模型类继承自django.db.models.Model类，并添加了seat_id字段，用于存储座位号。

视图view
在views.py文件中定义了多个视图函数，用于处理用户请求并返回响应。视图函数主要包括：
login()：用于用户登录，返回登录页面。
register()：用于用户注册，返回注册成功或失败的信息。
home()：用于直接跳转登录页面
reserve_seat()：用于用户预约座位，返回预约成功或失败的信息。
profile_view()：用于用户查看个人信息，返回个人信息页面。
logout()：用于用户注销登录，返回注销成功的信息。

模板template
在templates文件夹中定义了多个HTML模板文件，用于渲染页面。模板文件主要包括：
base.html：基础模板，包含网站的头部、底部和侧边栏。
login.html：登录页面，包含用户名和密码输入框以及登录按钮。
register.html：注册页面，包含用户名、密码、手机号输入框以及注册按钮。
home.html：首页，包含用户名、座位号、开始时间、结束时间、状态等信息。
profile.html：个人信息页面，包含用户名、手机号等信息。
logout.html：注销页面，包含注销成功的信息。

目前基本功能大致成型，但还有许多细节需要完善，例如：
1. 预约座位时需要判断座位是否已经被预约，如果已经被预约则返回错误信息。
        根据用户提交的预约信息，查询是否存在与该座位和时间段冲突的预约记录。如果存在冲突，则返回错误信息；否则，将预约信息保存到数据库中，并返回成功信息。
            对于同一座位，只要预约时间段有重叠就是冲突。例如，如果用户A预约了座位1的9:00-10:00，用户B预约了座位1的9:50-11:00，那么这两个预约就是冲突的。
    同理需要判断该用户是否在该时间段已有预约
2. 取消预约时需要判断用户是否已经预约该座位，如果没有预约则返回错误信息。
3. 签到时需要判断用户是否已经预约该座位，如果没有预约则返回错误信息。
4. 管理员可以在后台管理预约信息，包括查看、修改、删除预约信息。
5. 用户可以在个人信息页面查看自己的预约信息，包括查看、修改、删除预约信息。
6. 管理员可以在后台管理用户信息，包括查看、修改、删除用户信息。
7. 用户可以在个人信息页面查看自己的个人信息，包括查看、修改、删除个人信息。
8. 管理员可以在后台管理座位信息，包括查看、修改、删除座位信息。
9. 用户可以在首页查看座位信息，包括查看座位是否已经被预约。
10. 管理员可以在后台管理座位信息，包括查看、修改、删除座位信息。

定时任务
制作了一个脚本，用于定时执行注册的命令。
注册命令
注册了一个检查预约是否到期的命令，如果到期则自动取消预约。